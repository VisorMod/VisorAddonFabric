plugins {
    id 'java'
    id "fabric-loom" version "1.10-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.phoenixra'
version = '1.0.0-SNAPSHOT'

repositories {
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    maven { url 'https://jitpack.io' }
    maven { url 'https://redempt.dev' }
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    minecraft "com.mojang:minecraft:${libs.versions.minecraftVersion.get()}"
    mappings "net.fabricmc:yarn:${libs.versions.yarnMappings.get()}:v2"

    modImplementation(libs.fabric.loader)


    //modApi("com.github.Phoenix-Ra:Visor:0.0.10")
    modImplementation fileTree(dir: 'libs', include: '*.jar')

    compileOnly(libs.bundles.annotations)
    annotationProcessor(libs.bundles.annotations)
}

// Create a resolvable config for shading only implementation deps
configurations {
    shade {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation
    }
}

// Shade only the AtumConfiguration libs into a small dev jar
shadowJar {
    // pull only from our 'shade' config
    configurations = [ project.configurations.shade ]
    // classifier so this jar is input to remapJar, not final
    archiveClassifier.set('dev-shadow')

    // relocate any dependencies AtumConfiguration ships
    relocate 'org.yaml.snakeyaml',  'me.phoenixra.libs.org.yaml.snakeyaml'
    relocate 'com.google.gson',     'me.phoenixra.libs.com.google.gson'
    relocate 'redempt.crunch',   'me.phoenixra.libs.redempt.crunch'
    relocate 'me.phoenixra.atumconfig',   'me.phoenixra.libs.me.phoenixra.atumconfig'

}



// ----- REMAP SHADOW JAR & ACCESS-WIDENER REMAPPING -----

// Have Loom remap the shadowJar output (including accessWidener) into the final obf jar
tasks.named('remapJar') {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
    archiveClassifier.set('')
}

tasks.build {
    dependsOn tasks.named('remapJar')
}

compileJava {

    dependsOn clean
}

tasks.processResources {
    inputs.property 'version', project.version
    filesMatching("fabric.mod.json") {
        expand(version: project.version)
    }
}

java {
    // Generate sources jar; Loom wires it into remapSourcesJar automatically
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
